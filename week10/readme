# Weekly Assignment 10

### Due Monday, 11/25 at 6:00pm

 create a web server application in Node.js that will respond to various requests for JSON data for AA meetings, process blog entries, and sensor readings, aggregrated into one landing page from the very begining

my app  include:  

* A landing page, with references to the three pages detailed below.  
* A page that shows the AA dataï¼š link to the raw data, detailed query is not fully developped yet 
* A page that shows the learning process data.  link to the raw data, detailed query is not fully developped yet 
* A page that shows the  sensor data.link to the raw data, detailed query is not fully developped yet 


the website link:
http://3.84.66.212:8080/



``` code
async function allTem() {
    try{
        //const result1 = await client_aa.query("SELECT COUNT (*) FROM sensorData;"); // print the number of rows)
        //const result2 = await client_aa.query("SELECT MIN(sensorValue) FROM sensorData;");
        //const result3 = await client_aa.query("SELECT sensorValue, COUNT (*) FROM sensorData GROUP BY sensorValue;")
        const result4 = await client_aa.query("SELECT * FROM sensorData");
        return  result4.rows;
    }
    catch(e){
        return (e);
    }
    
}

async function allAA() {
    try{
        await connect();
        const result1 = await client_aa.query("SELECT * FROM aameeting")
        console.log(result1.rows)
        return  result1.rows
    }
    catch(e){
        return (e);
    }
    
}

async function allDia() {
    try{
        
        var params = {
        TableName : "LearningProcessBlog",
        KeyConditionExpression: "#dt = :minDate and #cat = :category" ,
        ExpressionAttributeNames: { 
        "#dt" : "dateTimeDetail",
        "#cat" : "category"
        },
        ExpressionAttributeValues: { // the query values
        ":minDate": {S: new Date("30 August 2019 14:48 UTC").toISOString()},
        ":category": {S: "datastructure"}
        }
        };

        const data = client_dynamodb.query(params).promise();
        return data;
    }
    catch(e){
        return (e);
    }
    
}

I created different queries as functions for each page, and call that function through certain page. here I have three functions which loaded the raw data of three projects.
Further queries will also follow this pattern.